#!/usr/bin/env amm

import ammonite.ops._
import ammonite.ops.ImplicitWd._
import scala.util.control.NonFatal

import $file.phabricatorClient
import $file.provision

/**
 * Compile Marathon and run unit and integration tests followed by scapegoat.
 */
@main
def compileAndTest(): Unit = {
  %('sbt, 'clean, 'test, "integration:test", 'scapegoat)
}

/**
 * The pipeline target for Phabricator builds. It triggers the Jenkins target
 * and does some additional reporting to Phabricator.
 */
@main
def phabricator(): Unit = {
  val diffId: String = sys.env.getOrElse("DIFF_ID", throw new IllegalArgumentException("No DIFF_ID was defined."))
  val revisionId: String = sys.env.getOrElse("REVISION_ID", throw new IllegalArgumentException("No REVISION_ID was defined."))
  val buildUrl: String = sys.env.getOrElse("BUILD_URL", throw new IllegalArgumentException("No BUILD_URL was defined."))
  val buildTag: String = sys.env.getOrElse("BUILD_TAG", "here")

  try {
    jenkins()
    phabricatorClient.reportSuccess(diffId, revisionId, buildUrl, buildTag)
  } catch {
    case NonFatal(e) =>
      phabricatorClient.reportFailure(diffId, revisionId, buildUrl, buildTag, e.getMessage())
      throw e
  }
}

/**
 * The main pipeline target for builds on Jekins.
 */
@main
def jenkins(): Unit = {
  provision.killStaleTestProcesses()
  provision.installMesos()

  compileAndTest()
}
